package example.grpc.client;

/* these imported classes are generated by the hello-world-server contract */
import example.grpc.Message;
import example.grpc.MessageServiceGrpc;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.*;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

import static java.nio.charset.StandardCharsets.UTF_8;

public class HelloClient {

	private String clientPrivKeyFileName = "client-priv.key";
	private String serverPubKeyFileName = "pub.key";

	public static RSAPrivateKey getPriv(String filename) throws Exception {
		File file = new File("resources/" + filename);
		String absolutePath = file.getAbsolutePath();
		byte[] keyBytes = Files.readAllBytes(Paths.get(absolutePath));

		PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);
		KeyFactory kf = KeyFactory.getInstance("RSA");
		return (RSAPrivateKey) kf.generatePrivate(spec);
	}

	public static RSAPublicKey getPub(String filename) throws Exception {
		File file = new File("resources/" + filename);
		String absolutePath = file.getAbsolutePath();
		byte[] keyBytes = Files.readAllBytes(Paths.get(absolutePath));

		X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);
		KeyFactory kf = KeyFactory.getInstance("RSA");
		return (RSAPublicKey) kf.generatePublic(spec);
	}

	public static String encrypt(String plainText, PublicKey publicKey) throws Exception {
		Cipher encryptCipher = Cipher.getInstance("RSA");
		encryptCipher.init(Cipher.ENCRYPT_MODE, publicKey);

		byte[] cipherText = encryptCipher.doFinal(plainText.getBytes(StandardCharsets.UTF_8));

		return Base64.getEncoder().encodeToString(cipherText);
	}

	public static String sign(String plainText, PrivateKey privateKey) throws Exception {
		Signature privateSignature = Signature.getInstance("SHA256withRSA");
		privateSignature.initSign(privateKey);
		privateSignature.update(plainText.getBytes(StandardCharsets.UTF_8));

		byte[] signature = privateSignature.sign();

		return Base64.getEncoder().encodeToString(signature);
	}

	public static boolean verify(String plainText, String signature, PublicKey publicKey) throws Exception {
		Signature publicSignature = Signature.getInstance("SHA256withRSA");
		publicSignature.initVerify(publicKey);
		publicSignature.update(plainText.getBytes(UTF_8));

		byte[] signatureBytes = Base64.getDecoder().decode(signature);

		return publicSignature.verify(signatureBytes);
	}

	public static String decrypt(String cipherText, PrivateKey privateKey) throws Exception {
		byte[] bytes = Base64.getDecoder().decode(cipherText);

		Cipher decriptCipher = Cipher.getInstance("RSA");
		decriptCipher.init(Cipher.DECRYPT_MODE, privateKey);

		return new String(decriptCipher.doFinal(bytes), UTF_8);
	}

	public static String encryptAES(String value) {
		try {
			SecretKeySpec skeySpec = getAESKey("aes.key");

			Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
			cipher.init(Cipher.ENCRYPT_MODE, skeySpec, new IvParameterSpec(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }));

			byte[] encrypted = cipher.doFinal(value.getBytes());
			return Base64.getEncoder().encodeToString(encrypted);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return null;
	}

	public static SecretKeySpec getAESKey(String keyPath) throws GeneralSecurityException, IOException {
		File file = new File("resources/" + keyPath);
		String absolutePath = file.getAbsolutePath();
		FileInputStream fis = new FileInputStream(absolutePath);
		byte[] encoded = new byte[fis.available()];
		fis.read(encoded);
		fis.close();

		return new SecretKeySpec(encoded, 0, 16, "AES");
	}

	public static String decryptAES(String encrypted) {
		try {
			SecretKeySpec skeySpec = getAESKey("aes.key");

			Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
			cipher.init(Cipher.DECRYPT_MODE, skeySpec, new IvParameterSpec(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }));

			byte[] original = cipher.doFinal(Base64.getDecoder().decode(encrypted));

			return new String(original);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return null;
	}

	public static void main(String[] args) throws Exception {
		System.out.println(HelloClient.class.getSimpleName());

		System.out.printf("Received %d arguments%n", args.length);
		for (int i = 0; i < args.length; i++) {
			System.out.printf("arg[%d] = %s%n", i, args[i]);
		}

		if (args.length < 2) {
			System.err.println("Argument(s) missing!");
			System.err.printf("Usage: java %s host port%n", HelloClient.class.getName());
			return;
		}

		final String host = args[0];
		final int port = Integer.parseInt(args[1]);
		final String target = host + ":" + port;

		// Channel is the abstraction to connect to a service endpoint
		// Let us use plaintext communication because we do not have certificates
		final ManagedChannel channel = ManagedChannelBuilder.forTarget(target).usePlaintext().build();

		MessageServiceGrpc.MessageServiceBlockingStub stub = MessageServiceGrpc.newBlockingStub(channel);

		RSAPublicKey serverPubKey = getPub("pub.key");
		RSAPrivateKey clientPrivKey = getPriv("client-priv.key");
		String content = encryptAES("friend");
		Message.MessageRequest request = Message.MessageRequest.newBuilder()
				.setContent(content)
				.setSignature(sign(content, clientPrivKey))
				.build();

		Message.MessageResponse response = stub.greeting(request);
		String responseContent = response.getContent();
		String responseSignature = response.getSignature();
		try {
			if (verify(responseContent, responseSignature, serverPubKey)) {
				System.out.println("Signature verified! Received message -> " + decryptAES(responseContent));
			}
		} catch (Exception ignored) {
		}

		// A Channel should be shutdown before stopping the process.
		channel.shutdownNow();
	}

}
